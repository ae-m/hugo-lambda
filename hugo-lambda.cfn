{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Outputs": {
        "WebsiteURL": {
            "Description": "URL for your actual site",
            "Value": {
                "Fn::GetAtt": [
                    "OutputBucket",
                    "WebsiteURL"
                ]
            }
        },
        "ExecRoleName": {
            "Description": "Name of the lambda execution role",
            "Value": {
                "Ref": "ExecRole"
            }
        }
    },
    "Parameters": {
        "CodeKey": {
            "Default": "hugo-lambda/generate.latest.zip",
            "Type": "String",
            "Description": "S3 key where the zipfile is"
        },
        "DomainRoot": {
            "Default": "rsb.io",
            "Type": "String",
            "Description": "Domain name for your website (example.com)"
        },
        "CodeBucket": {
            "Default": "files.rsb.io",
            "Type": "String",
            "Description": "S3 bucket where the lambda code zipfile is stored"
        }
    },
    "Resources": {
        "BucketLinker": {
            "Type": "Custom::LambaS3NotificationLink",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "LambdaS3Linker",
                        "Arn"
                    ]
                },
                "Bucket": {
                    "Fn::Join": [
                        ".",
                        [
                            "input",
                            {
                                "Ref": "DomainRoot"
                            }
                        ]
                    ]
                },
                "FunctionArn": {
                    "Fn::GetAtt": [
                        "HugoLambdaGenerate",
                        "Arn"
                    ]
                }
            },
            "DependsOn": [
                "HugoLambdaGenerate",
                "ExecRole",
                "InputBucket"
            ]
        },
        "SiteChangeTopic": {
            "Type": "AWS::SNS::Topic",
            "Properties": {
                "DisplayName": "Notifications for new S3 content for Hugo site",
                "Subscription": [
                    {
                        "Endpoint": {
                            "Fn::GetAtt": [
                                "HugoLambdaGenerate",
                                "Arn"
                            ]
                        },
                        "Protocol": "lambda"
                    }
                ]
            }
        },
        "WWWBucket": {
            "Type": "AWS::S3::Bucket",
            "Description": "Aliased bucket for www.domain.com",
            "Properties": {
                "AccessControl": "BucketOwnerFullControl",
                "BucketName": {
                    "Fn::Join": [
                        ".",
                        [
                            "www",
                            {
                                "Ref": "DomainRoot"
                            }
                        ]
                    ]
                },
                "WebsiteConfiguration": {
                    "RedirectAllRequestsTo": {
                        "HostName": {
                            "Ref": "OutputBucket"
                        }
                    }
                }
            }
        },
        "SiteDNS": {
            "Type": "AWS::Route53::RecordSetGroup",
            "Properties": {
                "Comment": "Zone apex alias.",
                "HostedZoneName": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "DomainRoot"
                            },
                            "."
                        ]
                    ]
                },
                "RecordSets": [
                    {
                        "AliasTarget": {
                            "HostedZoneId": {
                                "Fn::FindInMap": [
                                    "RegionMap",
                                    {
                                        "Ref": "AWS::Region"
                                    },
                                    "S3hostedzoneID"
                                ]
                            },
                            "DNSName": {
                                "Fn::FindInMap": [
                                    "RegionMap",
                                    {
                                        "Ref": "AWS::Region"
                                    },
                                    "websiteendpoint"
                                ]
                            }
                        },
                        "Type": "A",
                        "Name": {
                            "Ref": "DomainRoot"
                        }
                    },
                    {
                        "AliasTarget": {
                            "HostedZoneId": {
                                "Fn::FindInMap": [
                                    "RegionMap",
                                    {
                                        "Ref": "AWS::Region"
                                    },
                                    "S3hostedzoneID"
                                ]
                            },
                            "DNSName": {
                                "Fn::FindInMap": [
                                    "RegionMap",
                                    {
                                        "Ref": "AWS::Region"
                                    },
                                    "websiteendpoint"
                                ]
                            }
                        },
                        "Type": "A",
                        "Name": {
                            "Fn::Join": [
                                "",
                                [
                                    "www.",
                                    {
                                        "Ref": "DomainRoot"
                                    }
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "ExecRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            }
                        }
                    ]
                }
            }
        },
        "HugoLambdaGenerate": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "CodeBucket"
                    },
                    "S3Key": {
                        "Ref": "CodeKey"
                    }
                },
                "Role": {
                    "Fn::GetAtt": [
                        "ExecRole",
                        "Arn"
                    ]
                },
                "Timeout": 60,
                "Handler": "RunHugo.handler",
                "Runtime": "nodejs",
                "MemorySize": 128
            }
        },
        "SiteChangeTopicPolicy": {
            "Type": "AWS::SNS::TopicPolicy",
            "Properties": {
                "Topics": [
                    {
                        "Ref": "SiteChangeTopic"
                    }
                ],
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Action": "sns:Publish",
                            "Resource": {
                                "Ref": "SiteChangeTopic"
                            },
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "s3.amazonaws.com"
                                ]
                            }
                        }
                    ]
                }
            }
        },
        "OutputBucket": {
            "Type": "AWS::S3::Bucket",
            "Description": "Bucket that will serve the actual website (content) publicly.",
            "Properties": {
                "AccessControl": "PublicRead",
                "BucketName": {
                    "Ref": "DomainRoot"
                },
                "WebsiteConfiguration": {
                    "IndexDocument": "index.html",
                    "ErrorDocument": "error.html"
                }
            }
        },
        "LambdaS3Linker": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Handler": "index.handler",
                "Runtime": "nodejs",
                "Code": {
                    "ZipFile": "var response=require('cfn-response');var AWS=require('aws-sdk');exports.handler=function(event,context){console.log(\"REQUEST RECEIVED:\\n\"+JSON.stringify(event));if(event.RequestType==\"Delete\"){sendResponse(event,context,\"SUCCESS\");return;}\nvar s3=new AWS.S3();var params={Bucket:event.ResourceProperties.Bucket,NotificationConfiguration:{LambdaFunctionConfigurations:[{Id:\"HugoSiteNotifier\",Events:[\"s3:ObjectCreated:*\"],LambdaFunctionArn:event.ResourceProperties.FunctionArn,}]}};s3.putBucketNotificationConfiguration(params,function(err,data){if(err){console.log(err,err.stack);response.send(event,context,\"FAILED\",\"\");}else{response.send(event,context,\"SUCCESS\",\"\");}});};function sendResponse(event,context,responseStatus,responseData){var responseBody=JSON.stringify({Status:responseStatus,Reason:\"See the details in CloudWatch Log Stream: \"+context.logStreamName,PhysicalResourceId:context.logStreamName,StackId:event.StackId,RequestId:event.RequestId,LogicalResourceId:event.LogicalResourceId,Data:responseData});console.log(\"RESPONSE BODY:\\n\",responseBody);var https=require(\"https\");var url=require(\"url\");var parsedUrl=url.parse(event.ResponseURL);var options={hostname:parsedUrl.hostname,port:443,path:parsedUrl.path,method:\"PUT\",headers:{\"content-type\":\"\",\"content-length\":responseBody.length}};console.log(\"SENDING RESPONSE...\\n\");var request=https.request(options,function(response){console.log(\"STATUS: \"+response.statusCode);console.log(\"HEADERS: \"+JSON.stringify(response.headers)); context.done();});request.on(\"error\",function(error){console.log(\"sendResponse Error:\"+error); context.done();}); request.write(responseBody);request.end();}"
                },
                "Role": {
                    "Fn::GetAtt": [
                        "ExecRole",
                        "Arn"
                    ]
                },
                "Timeout": 5
            }
        },
        "ExecRolePolicies": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "ExecRolePolicy",
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Action": [
                                "logs:*"
                            ],
                            "Resource": "arn:aws:logs:*:*:*",
                            "Effect": "Allow"
                        },
                        {
                            "Action": [
                                "lambda:InvokeFunction"
                            ],
                            "Resource": [
                                "*"
                            ],
                            "Effect": "Allow",
                            "Condition": {
                                "ArnLike": {
                                    "AWS:SourceArn": {
                                        "Fn::Join": [
                                            ":",
                                            [
                                                "arn:aws:sns:*",
                                                {
                                                    "Ref": "AWS::AccountId"
                                                },
                                                "*"
                                            ]
                                        ]
                                    }
                                }
                            }
                        },
                        {
                            "Action": [
                                "s3:HeadObject",
                                "s3:ListAllMyBuckets",
                                "s3:GetBucketLocation"
                            ],
                            "Resource": [
                                "arn:aws:s3:::*"
                            ],
                            "Effect": "Allow"
                        },
                        {
                            "Action": "s3:*",
                            "Resource": [
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:aws:s3:::",
                                            {
                                                "Ref": "DomainRoot"
                                            }
                                        ]
                                    ]
                                },
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:aws:s3:::",
                                            {
                                                "Ref": "DomainRoot"
                                            },
                                            "/*"
                                        ]
                                    ]
                                }
                            ],
                            "Effect": "Allow"
                        },
                        {
                            "Action": [
                                "s3:Get*",
                                "s3:Head*",
                                "s3:List*"
                            ],
                            "Resource": [
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:aws:s3:::",
                                            "input.",
                                            {
                                                "Ref": "DomainRoot"
                                            }
                                        ]
                                    ]
                                },
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:aws:s3:::",
                                            "input.",
                                            {
                                                "Ref": "DomainRoot"
                                            },
                                            "/*"
                                        ]
                                    ]
                                }
                            ],
                            "Effect": "Allow"
                        }
                    ]
                },
                "Roles": [
                    {
                        "Ref": "ExecRole"
                    }
                ]
            }
        },
        "InputBucket": {
            "Type": "AWS::S3::Bucket",
            "Description": "Bucket that editors/clients put new content into",
            "Properties": {
                "AccessControl": "BucketOwnerFullControl",
                "NotificationConfiguration": {
                    "TopicConfigurations": [
                        {
                            "Topic": {
                                "Ref": "SiteChangeTopic"
                            },
                            "Event": "s3:ObjectCreated:*"
                        }
                    ]
                },
                "BucketName": {
                    "Fn::Join": [
                        ".",
                        [
                            "input",
                            {
                                "Ref": "DomainRoot"
                            }
                        ]
                    ]
                }
            }
        }
    },
    "Mappings": {
        "RegionMap": {
            "us-east-1": {
                "websiteendpoint": "s3-website-us-east-1.amazonaws.com",
                "S3hostedzoneID": "Z3AQBSTGFYJSTF"
            },
            "ap-northeast-1": {
                "websiteendpoint": "s3-website-ap-northeast-1.amazonaws.com",
                "S3hostedzoneID": "Z2M4EHUR26P7ZW"
            },
            "sa-east-1": {
                "websiteendpoint": "s3-website-sa-east-1.amazonaws.com",
                "S3hostedzoneID": "Z31GFT0UA1I2HV"
            },
            "ap-southeast-1": {
                "websiteendpoint": "s3-website-ap-southeast-1.amazonaws.com",
                "S3hostedzoneID": "Z3O0J2DXBE1FTB"
            },
            "ap-southeast-2": {
                "websiteendpoint": "s3-website-ap-southeast-2.amazonaws.com",
                "S3hostedzoneID": "Z1WCIGYICN2BYD"
            },
            "us-west-2": {
                "websiteendpoint": "s3-website-us-west-2.amazonaws.com",
                "S3hostedzoneID": "Z3BJ6K6RIION7M"
            },
            "us-west-1": {
                "websiteendpoint": "s3-website-us-west-1.amazonaws.com",
                "S3hostedzoneID": "Z2F56UZL2M1ACD"
            },
            "eu-west-1": {
                "websiteendpoint": "s3-website-eu-west-1.amazonaws.com",
                "S3hostedzoneID": "Z1BKCTXD74EZPE"
            }
        }
    }
}