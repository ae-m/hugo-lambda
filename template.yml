---
  AWSTemplateFormatVersion: "2010-09-09"
  Outputs:
    WebsiteURL:
      Value:
        Fn::GetAtt:
          - "OutputBucket"
          - "WebsiteURL"
      Description: "URL for your actual site"
    ExecRoleName:
      Value:
        Ref: "ExecRole"
      Description: "Name of the lambda execution role"
  Parameters:
    DomainRoot:
      Description: "Domain name for your website (example.com)"
      Default: "rsb.io"
      Type: "String"
    CodeBucket:
      Description: "S3 bucket where the lambda code zipfile is stored"
      Default: "files.rsb.io"
      Type: "String"
    CodeKey:
      Description: "S3 key where the zipfile is"
      Default: "hugo-lambda/generate.latest.zip"
      Type: "String"
  Resources:
    SiteDNS:
      Type: "AWS::Route53::RecordSetGroup"
      Properties:
        RecordSets:
          -
            AliasTarget:
              DNSName:
                Fn::FindInMap:
                  - "RegionMap"
                  - {"Ref": "AWS::Region"}
                  - "websiteendpoint"
              HostedZoneId:
                Fn::FindInMap:
                  - "RegionMap"
                  - {"Ref": "AWS::Region"}
                  - "S3hostedzoneID"
            Type: "A"
            Name: {"Ref": "DomainRoot"}
          -
            AliasTarget:
              DNSName:
                Fn::FindInMap:
                  - "RegionMap"
                  - {"Ref": "AWS::Region"}
                  - "websiteendpoint"
              HostedZoneId:
                Fn::FindInMap:
                  - "RegionMap"
                  - {"Ref": "AWS::Region"}
                  - "S3hostedzoneID"
            Type: "A"
            Name:
              Fn::Join:
                - ""
                - ["www.", {"Ref": "DomainRoot"}]
        Comment: "Zone apex alias."
        HostedZoneName:
          Fn::Join:
            - ""
            - [{"Ref": "DomainRoot"}, "."]
    ExecRolePolicies:
      Type: "AWS::IAM::Policy"
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action: ["logs:*"]
              Resource: "arn:aws:logs:*:*:*"
            - Effect: "Allow"
              Resource: ["*"]
              Action: ["lambda:InvokeFunction"]
              Condition:
                ArnLike:
                  "AWS:SourceArn":
                    "Fn::Join":
                        - ":"
                        - ["arn:aws:sns:*", { Ref: "AWS::AccountId"}, "*"]
            - Effect: "Allow"
              Action:
                - "s3:HeadObject"
                - "s3:ListAllMyBuckets"
                - "s3:GetBucketLocation"
              Resource: ["arn:aws:s3:::*"]
            - Effect: "Allow"
              Action: "s3:*"
              Resource:
                - Fn::Join:
                    - ""
                    - ["arn:aws:s3:::", {"Ref": "DomainRoot"}]
                - Fn::Join:
                    - ""
                    - ["arn:aws:s3:::", {"Ref": "DomainRoot"}, "/*"]
            - Effect: "Allow"
              Action:
                - "s3:Get*"
                - "s3:Head*"
                - "s3:List*"
              Resource:
                - Fn::Join:
                    - ""
                    - ["arn:aws:s3:::", "input.", {"Ref": "DomainRoot"}]
                - Fn::Join:
                    - ""
                    - ["arn:aws:s3:::", "input.", {"Ref": "DomainRoot"}, "/*"]
        Roles:
          - {"Ref": "ExecRole"}
        PolicyName: "ExecRolePolicy"
    ExecRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Statement:
            - Effect: "Allow"
              Principal:
                Service: ["lambda.amazonaws.com"]
              Action: ["sts:AssumeRole"]
          Version: "2012-10-17"
    HugoLambdaGenerate:
      Type: "AWS::Lambda::Function"
      Properties:
        Handler: RunHugo.handler
        Role: { "Fn::GetAtt": [ExecRole, Arn]}
        Runtime: nodejs
        Timeout: 60
        MemorySize: 128
        Code:
          S3Bucket: {"Ref": "CodeBucket"}
          S3Key: {"Ref": "CodeKey"}
    LambdaS3Linker:
      Type: "AWS::Lambda::Function"
      Properties:
        Handler: index.handler
        Role: { "Fn::GetAtt": [ExecRole, Arn]}
        Runtime: nodejs
        Timeout: 5
        Code:
          ZipFile: |
            var response = require('cfn-response');
            var AWS = require('aws-sdk');
            exports.handler = function(event, context) {
              console.log("REQUEST RECEIVED:\n" + JSON.stringify(event));
              if (event.RequestType == "Delete") {
                sendResponse(event, context, "SUCCESS");
                return;
              }
              var s3 = new AWS.S3();
              var params = {
                Bucket: event.ResourceProperties.Bucket,
                NotificationConfiguration: {
                  LambdaFunctionConfigurations: [
                    {
                      Id: "HugoSiteNotifier",
                      Events: ["s3:ObjectCreated:*"],
                      LambdaFunctionArn: event.ResourceProperties.FunctionArn,
                    }
                  ]
                }
              };
              s3.putBucketNotificationConfiguration(params, function (err, data) {
                  if (err) {
                    console.log(err, err.stack);
                    response.send(event, context, "FAILED", "");
                  } else {
                    response.send(event, context, "SUCCESS", "");
                  }
                }
              );
            };
            // Send response to the pre-signed S3 URL
            function sendResponse(event, context, responseStatus, responseData) {
                var responseBody = JSON.stringify({
                    Status: responseStatus,
                    Reason: "See the details in CloudWatch Log Stream: " + context.logStreamName,
                    PhysicalResourceId: context.logStreamName,
                    StackId: event.StackId,
                    RequestId: event.RequestId,
                    LogicalResourceId: event.LogicalResourceId,
                    Data: responseData
                });
                console.log("RESPONSE BODY:\n", responseBody);
                var https = require("https");
                var url = require("url");
                var parsedUrl = url.parse(event.ResponseURL);
                var options = {
                    hostname: parsedUrl.hostname,
                    port: 443,
                    path: parsedUrl.path,
                    method: "PUT",
                    headers: {
                        "content-type": "",
                        "content-length": responseBody.length
                    }
                };

                console.log("SENDING RESPONSE...\n");

                var request = https.request(options, function(response) {
                    console.log("STATUS: " + response.statusCode);
                    console.log("HEADERS: " + JSON.stringify(response.headers));
                    // Tell AWS Lambda that the function execution is done
                    context.done();
                });

                request.on("error", function(error) {
                    console.log("sendResponse Error:" + error);
                    // Tell AWS Lambda that the function execution is done
                    context.done();
                });

                // write data to request body
                request.write(responseBody);
                request.end();
            };

    BucketLinker:
      DependsOn:
        - HugoLambdaGenerate
        - ExecRole
        - InputBucket
      Type: "Custom::LambaS3NotificationLink"
      Properties:
        ServiceToken: {"Fn::GetAtt": [LambdaS3Linker, Arn]}
        Bucket: 
          Fn::Join:
            - "."
            - ["input", {"Ref": "DomainRoot"}]
        FunctionArn: {"Fn::GetAtt": [HugoLambdaGenerate, Arn]}
    SiteChangeTopic:
      # TODO(ryansb): Get rid of this topic when it's possible to configure
      # bucket notifications for Lambda
      Type: "AWS::SNS::Topic"
      Properties:
        DisplayName: Notifications for new S3 content for Hugo site
        Subscription:
          - Endpoint: {"Fn::GetAtt": [HugoLambdaGenerate, Arn]}
            Protocol: lambda
    SiteChangeTopicPolicy:
      Type: "AWS::SNS::TopicPolicy"
      Properties:
        Topics:
          - {Ref: SiteChangeTopic}
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: ["s3.amazonaws.com"]
              Action: "sns:Publish"
              Resource: {Ref: SiteChangeTopic}
              # TODO(ryansb): figure out how to make this conditional work
              # currently it denies the domain input bucket for unknown
              # reasons.
              #Condition:
              #  ArnLike:
              #    "AWS::SourceArn":
              #      "Fn::Join":
              #        - ""
              #        -
              #          - "arn:aws:s3:*:*:"
              #          - "input."
              #          - {Ref: DomainRoot}
              #          - "*"
    InputBucket:
      Type: "AWS::S3::Bucket"
      Description: "Bucket that editors/clients put new content into"
      Properties:
        BucketName:
          Fn::Join:
            - "."
            - ["input", {"Ref": "DomainRoot"}]
        AccessControl: "BucketOwnerFullControl"
        #VersioningConfiguration:
        #  Status: Enabled
        NotificationConfiguration:
          TopicConfigurations:
            - Topic: {Ref: SiteChangeTopic}
              Event: "s3:ObjectCreated:*"
    WWWBucket:
      Type: "AWS::S3::Bucket"
      Description: "Aliased bucket for www.domain.com"
      Properties:
        BucketName:
          Fn::Join:
            - "."
            - ["www", {"Ref": "DomainRoot"}]
        WebsiteConfiguration:
          RedirectAllRequestsTo:
            HostName:
              Ref: "OutputBucket"
        AccessControl: "BucketOwnerFullControl"
    OutputBucket:
      Type: "AWS::S3::Bucket"
      Description: "Bucket that will serve the actual website (content) publicly."
      Properties:
        BucketName:
          Ref: "DomainRoot"
        AccessControl: "PublicRead"
        WebsiteConfiguration:
          IndexDocument: "index.html"
          ErrorDocument: "error.html"
  Mappings:
    RegionMap:
      # This is a map of the S3 website endpoints as of Feb 08. 2015
      # Don't edit this
      sa-east-1:
        websiteendpoint: "s3-website-sa-east-1.amazonaws.com"
        S3hostedzoneID: "Z31GFT0UA1I2HV"
      ap-northeast-1:
        websiteendpoint: "s3-website-ap-northeast-1.amazonaws.com"
        S3hostedzoneID: "Z2M4EHUR26P7ZW"
      ap-southeast-2:
        websiteendpoint: "s3-website-ap-southeast-2.amazonaws.com"
        S3hostedzoneID: "Z1WCIGYICN2BYD"
      ap-southeast-1:
        websiteendpoint: "s3-website-ap-southeast-1.amazonaws.com"
        S3hostedzoneID: "Z3O0J2DXBE1FTB"
      eu-west-1:
        websiteendpoint: "s3-website-eu-west-1.amazonaws.com"
        S3hostedzoneID: "Z1BKCTXD74EZPE"
      us-west-2:
        websiteendpoint: "s3-website-us-west-2.amazonaws.com"
        S3hostedzoneID: "Z3BJ6K6RIION7M"
      us-west-1:
        websiteendpoint: "s3-website-us-west-1.amazonaws.com"
        S3hostedzoneID: "Z2F56UZL2M1ACD"
      us-east-1:
        websiteendpoint: "s3-website-us-east-1.amazonaws.com"
        S3hostedzoneID: "Z3AQBSTGFYJSTF"
