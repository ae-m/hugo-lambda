---
  AWSTemplateFormatVersion: "2010-09-09"
  Outputs:
    WebsiteURL:
      Value:
        Fn::GetAtt:
          - "OutputBucket"
          - "WebsiteURL"
      Description: "URL for your actual site"
    ExecRoleName:
      Value:
        Ref: "ExecRole"
      Description: "Name of the lambda execution role"
  Parameters:
    DomainRoot:
      Description: "Domain name for your website (example.com)"
      Default: "rsb.io"
      Type: "String"
    CodeBucket:
      Description: "S3 bucket where the lambda code zipfile is stored"
      Default: "files.rsb.io"
      Type: "String"
    CodeKey:
      Description: "S3 key where the zipfile is"
      Default: "hugo-lambda/generate.latest.zip"
      Type: "String"
  Resources:
    SiteDNS:
      Type: "AWS::Route53::RecordSetGroup"
      Properties:
        RecordSets:
          -
            AliasTarget:
              DNSName:
                Fn::FindInMap:
                  - "RegionMap"
                  - {"Ref": "AWS::Region"}
                  - "websiteendpoint"
              HostedZoneId:
                Fn::FindInMap:
                  - "RegionMap"
                  - {"Ref": "AWS::Region"}
                  - "S3hostedzoneID"
            Type: "A"
            Name: {"Ref": "DomainRoot"}
          -
            AliasTarget:
              DNSName:
                Fn::FindInMap:
                  - "RegionMap"
                  - {"Ref": "AWS::Region"}
                  - "websiteendpoint"
              HostedZoneId:
                Fn::FindInMap:
                  - "RegionMap"
                  - {"Ref": "AWS::Region"}
                  - "S3hostedzoneID"
            Type: "A"
            Name:
              Fn::Join:
                - ""
                - ["www.", {"Ref": "DomainRoot"}]
        Comment: "Zone apex alias."
        HostedZoneName:
          Fn::Join:
            - ""
            - [{"Ref": "DomainRoot"}, "."]
    InvokeRolePolicies:
      Type: "AWS::IAM::Policy"
      Properties:
        PolicyName: "InvokeRolePolicy"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Resource: ["*"]
              Action: ["lambda:InvokeFunction"]
        Roles:
          - {"Ref": "InvokeRole"}
    InvokeRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Principal:
                Service: ["s3.amazonaws.com"]
              Action: ["sts:AssumeRole"]
              Condition:
                ArnLike:
                  sts:ExternalId: "arn:aws:s3:::*"
    ExecRolePolicies:
      Type: "AWS::IAM::Policy"
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action: ["logs:*"]
              Resource: "arn:aws:logs:*:*:*"
            - Effect: "Allow"
              Resource: ["*"]
              Action: ["lambda:InvokeFunction"]
            - Effect: "Allow"
              Action:
                - "s3:HeadObject"
                - "s3:ListAllMyBuckets"
                - "s3:GetBucketLocation"
              Resource: ["arn:aws:s3:::*"]
            - Effect: "Allow"
              Action: "s3:*"
              Resource:
                Fn::Join:
                  - ""
                  - ["arn:aws:s3:::", {"Ref": "DomainRoot"}]
            -
              Effect: "Allow"
              Action: "s3:*"
              Resource:
                Fn::Join:
                  - ""
                  - ["arn:aws:s3:::", {"Ref": "DomainRoot"}, "/*"]
            -
              Effect: "Allow"
              Action:
                - "s3:Get*"
                - "s3:Head*"
                - "s3:List*"
              Resource:
                Fn::Join:
                  - ""
                  - ["arn:aws:s3:::", "input.", {"Ref": "DomainRoot"}]
            -
              Effect: "Allow"
              Action:
                - "s3:Get*"
                - "s3:Head*"
                - "s3:List*"
              Resource:
                Fn::Join:
                  - ""
                  - ["arn:aws:s3:::", "input.", {"Ref": "DomainRoot"}, "/*"]
        Roles:
          - {"Ref": "ExecRole"}
        PolicyName: "ExecRolePolicy"
    ExecRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Statement:
            - Effect: "Allow"
              Principal:
                Service: ["lambda.amazonaws.com"]
              Action: ["sts:AssumeRole"]
          Version: "2012-10-17"
    HugoLambdaGenerate:
      Type: "AWS::Lambda::Function"
      Properties:
        Handler: RunHugo.handler
        Role: { "Fn::GetAtt": [ExecRole, Arn]}
        Runtime: nodejs
        Timeout: 60
        MemorySize: 128
        Code:
          S3Bucket: {"Ref": "CodeBucket"}
          S3Key: {"Ref": "CodeKey"}
    SiteChangeTopic:
      # TODO(ryansb): Get rid of this topic when it's possible to configure
      # bucket notifications for Lambda
      Type: "AWS::SNS::Topic"
      Properties:
        DisplayName: Notifications for new S3 content for Hugo site
        Subscription:
          - Endpoint: {"Fn::GetAtt": [HugoLambdaGenerate, Arn]}
            Protocol: lambda
    SiteChangeTopicPolicy:
      Type: "AWS::SNS::TopicPolicy"
      Properties:
        Topics:
          - {Ref: SiteChangeTopic}
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal: {Service: s3.amazonaws.com}
              Action: "sns:Publish"
              Resorce: {Ref: SiteChangeTopic}
              Condition:
                ArnLike:
                  "AWS::SourceArn":
                    "Fn::Join":
                      - ""
                      -
                        - "arn:aws:s3:*:*:"
                        - "input."
                        - {Ref: DomainRoot}
    InputBucket:
      Type: "AWS::S3::Bucket"
      Description: "Bucket that editors/clients put new content into"
      Properties:
        BucketName:
          Fn::Join:
            - "."
            - ["input", {"Ref": "DomainRoot"}]
        AccessControl: "BucketOwnerFullControl"
        VersioningConfiguration:
          Status: Enabled
        NotificationConfiguration:
          TopicConfigurations:
            - Topic: {"Fn::GetAtt": [HugoLambdaGenerate, Arn]}
              Event: "ObjectCreated:*"
    WWWBucket:
      Type: "AWS::S3::Bucket"
      Description: "Aliased bucket for www.domain.com"
      Properties:
        BucketName:
          Fn::Join:
            - "."
            - ["www", {"Ref": "DomainRoot"}]
        WebsiteConfiguration:
          RedirectAllRequestsTo:
            HostName:
              Ref: "OutputBucket"
        AccessControl: "BucketOwnerFullControl"
    OutputBucket:
      Type: "AWS::S3::Bucket"
      Description: "Bucket that will serve the actual website (content) publicly."
      Properties:
        BucketName:
          Ref: "DomainRoot"
        AccessControl: "PublicRead"
        WebsiteConfiguration:
          IndexDocument: "index.html"
          ErrorDocument: "error.html"
  Mappings:
    RegionMap:
      # This is a map of the S3 website endpoints as of Feb 08. 2015
      # Don't edit this
      sa-east-1:
        websiteendpoint: "s3-website-sa-east-1.amazonaws.com"
        S3hostedzoneID: "Z31GFT0UA1I2HV"
      ap-northeast-1:
        websiteendpoint: "s3-website-ap-northeast-1.amazonaws.com"
        S3hostedzoneID: "Z2M4EHUR26P7ZW"
      ap-southeast-2:
        websiteendpoint: "s3-website-ap-southeast-2.amazonaws.com"
        S3hostedzoneID: "Z1WCIGYICN2BYD"
      ap-southeast-1:
        websiteendpoint: "s3-website-ap-southeast-1.amazonaws.com"
        S3hostedzoneID: "Z3O0J2DXBE1FTB"
      eu-west-1:
        websiteendpoint: "s3-website-eu-west-1.amazonaws.com"
        S3hostedzoneID: "Z1BKCTXD74EZPE"
      us-west-2:
        websiteendpoint: "s3-website-us-west-2.amazonaws.com"
        S3hostedzoneID: "Z3BJ6K6RIION7M"
      us-west-1:
        websiteendpoint: "s3-website-us-west-1.amazonaws.com"
        S3hostedzoneID: "Z2F56UZL2M1ACD"
      us-east-1:
        websiteendpoint: "s3-website-us-east-1.amazonaws.com"
        S3hostedzoneID: "Z3AQBSTGFYJSTF"
